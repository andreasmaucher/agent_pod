/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AvaPaymentInterface extends Interface {
  getFunction(nameOrSignature: "ava" | "buyIn" | "setFees"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BuyIn"): EventFragment;

  encodeFunctionData(functionFragment: "ava", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyIn", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ava", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
}

export namespace BuyInEvent {
  export type InputTuple = [
    user: AddressLike,
    hashedPrompt: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    hashedPrompt: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    hashedPrompt: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AvaPayment extends BaseContract {
  connect(runner?: ContractRunner | null): AvaPayment;
  waitForDeployment(): Promise<this>;

  interface: AvaPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ava: TypedContractMethod<[], [string], "view">;

  buyIn: TypedContractMethod<[hashedPrompt: BytesLike], [void], "payable">;

  setFees: TypedContractMethod<
    [poolFeePerc_: BigNumberish, teamFeePerc_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ava"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyIn"
  ): TypedContractMethod<[hashedPrompt: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [poolFeePerc_: BigNumberish, teamFeePerc_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyIn"
  ): TypedContractEvent<
    BuyInEvent.InputTuple,
    BuyInEvent.OutputTuple,
    BuyInEvent.OutputObject
  >;

  filters: {
    "BuyIn(address,bytes32,uint256)": TypedContractEvent<
      BuyInEvent.InputTuple,
      BuyInEvent.OutputTuple,
      BuyInEvent.OutputObject
    >;
    BuyIn: TypedContractEvent<
      BuyInEvent.InputTuple,
      BuyInEvent.OutputTuple,
      BuyInEvent.OutputObject
    >;
  };
}
